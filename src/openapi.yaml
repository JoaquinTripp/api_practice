openapi: 3.0.4
info:
  title: FakeAPI store
  version: 1.0.1
  description: |-
    This is a sample FakeAPI Store Server based on the OpenAPI 3.X specification. You can find out more about Swagger at https://swagger.io. In the third iteration of the pet store, we've switched to the design first approach. You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.
    
    Some useful links:
    - [The Fake Store repository](https://github.com/platzi/curso-apifirst)
  termsOfService: http://example.com/terms
  contact:
    name: API Support
    url: http://example.com/support
    email: support@example.com
  license:
    name: MIT
    url: http://example.com/license
tags:
  - name: Users
    description: Operations related to users
  - name: Products
    description: Operations related to products
    externalDocs:
      description: Find out more about the OpenAI
      url: http://openai.com
servers:
  - url: http://localhost:3000/v1
    description: Version 1 of API
  - url: http://localhost:3000/v2
    description: Version 2 of API
components:
  schemas:
    HelloResponse:
      type: object
      properties:
        message:
          type: string
          example: Hello, world!
      example:
        message: Hello, world!
    GoodbyeResponse:
      type: object
      properties:
        message:
          type: string
          example: Goodbye, world!
      example:
        message: Goodbye, world!
    GreetResponse:
      type: object
      properties:
        message:
          type: string
          example: Hello, Joaquin!
        description:
          type: string
          example: This endpoint greets the user with their name.
      example:
        message: Hello, Joaquin!
        description: This endpoint greets the user with their name.
    User:
      type: object
      required:
        - name
        - age
        - email
      properties:
        name:
          type: string
          minLength: 2
          example: Joaquin
        age:
          type: integer
          minimum: 18
          example: 25
        email:
          type: string
          format: email
          example: joaquin@example.com
      example:
        name: Joaquin
        age: 25
        email: joaquin@example.com
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Joaquin
        age:
          type: integer
          example: 25
        email:
          type: string
          example: joaquin@example.com
      example:
        id: 1
        name: Joaquin
        age: 25
        email: joaquin@example.com
    UserSearchResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Joaquin
      example:
        id: 1
        name: Joaquin
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: User not found
      example:
        error: User not found
    Product:
      type: object
      required:
        - name
        - price
        - category
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          example: Smartphone
        description:
          type: string
          maxLength: 500
          example: Latest model smartphone with advanced features.
        price:
          type: number
          minimum: 0
          multipleOf: 0.01
          example: 699.99
        category:
          type: string
          enum: [electronics, clothing, books, home, beauty]
          example: electronics
        tags:
          type: array
          items: 
            type: string
          minItems: 1
          example: [mobile, gadgets]
        inStock:
          type: boolean
          example: true
        specifications:
          type: object
          additionalProperties:
            type: string
          example:
            color: black
            memory: 128GB
        ratings:
          type: array
          items:
            required:
              - score
              - comment
            properties:
              score:
                type: number
                minimum: 1
                maximum: 5
                example: 5
              comment:
                type: string
                maxLength: 500
                example: Excellent product!
          example:
            - score: 5
              comment: Excellent product!
            - score: 4
              comment: Very good, but a bit expensive.
      example:
        name: Smartphone
        description: Latest model smartphone with advanced features.
        price: 699.99
        category: electronics
        tags: [mobile, gadgets]
        inStock: true
        specifications:
          color: black
          memory: 128GB
        ratings:
          - score: 5
            comment: Excellent product!
          - score: 4
            comment: Very good, but a bit expensive.
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        Use this security scheme to authenticate requests with a JWT token.
        The token should be included in the `Authorization` header as follows:
        ```
        Authorization: Bearer <your_jwt_token>
        ```
security:
  - JWT: []  
paths:
  /auth/login:
    post:
      tags:
        - Users
      summary: Authenticate user and get JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: joaquin@example.com
                password:
                  type: string
                  example: 123456
      responses:
        '200':
          description: JWT token returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /hello:
    get:
      summary: Hello world
      responses:
        '200':
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
  /goodbye:
    get:
      summary: Goodbye world
      responses:
        '200':
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoodbyeResponse'
  /greet:
    get:
      summary: Greet the user
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A personalized greeting response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GreetResponse'
  /users:
    post:
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'   
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A successful response with user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSearchResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Users
      summary: Update user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /products:
    post:
      tags:
        - Products
      summary: Create a new product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid product data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Products
      summary: List all products
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

  /products/{id}:
    get:
      tags:
        - Products
      summary: Get product by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Products
      summary: Update product by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid product data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'