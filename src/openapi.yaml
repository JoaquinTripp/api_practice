openapi: 3.1.1
info:
  title: My first API
  version: 1.0.0
  description: This is an example OpenAPI specification for demonstration purposes.
servers:
  - url: http://localhost:3000
    description: Local development server
paths:
  /hello:
    get:
      summary: Hello world
      responses:
        '200':
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
  /goodbye:
    get:
      summary: Goodbye world
      responses:
        '200':
          description: A successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoodbyeResponse'
  /greet:
    get:
      summary: Greet the user
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A personalized greeting response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GreetResponse'
  /users:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'   
  /users/{id}:
    get:
      summary: Get user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A successful response with user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSearchResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Update user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /products:
    post:
      summary: Create a new product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid product data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      summary: List all products
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

  /products/{id}:
    get:
      summary: Get product by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    HelloResponse:
      type: object
      properties:
        message:
          type: string
          example: Hello, world!
    GoodbyeResponse:
      type: object
      properties:
        message:
          type: string
          example: Goodbye, world!
    GreetResponse:
      type: object
      properties:
        message:
          type: string
          example: Hello, {name}!
        description:
          type: string
          example: This endpoint greets the user with their name.
    User:
      type: object
      required:
        - name
        - age
        - email
      properties:
        name:
          type: string
          minLength: 2
        age:
          type: integer
          minimum: 18
        email:
          type: string
          format: email
    UserResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        age:
          type: integer
        email:
          type: string
    UserSearchResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: User not found
    Product:
      type: object
      required:
        - name
        - price
        - category
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
        description:
          type: string
          maxLength: 500
        price:
          type: number
          minimum: 0
          multipleOf: 0.01
        category:
          type: string
          enum: [electronics, clothing, books, home, beauty]
        tags:
          type: array
          items: 
            type: string
            minItems: 1
        inStock:
          type: boolean
        specifications:
          type: object
          additionalProperties:
            type: string
        ratings:
          type: array
          items:
            required:
              - score
              - comment
            properties:
              score:
                type: number
                minimum: 1
                maximum: 5
              comment:
                type: string
                maxLength: 500
                
            